8776b5ae1dd59d00ca825a75b86af28d
"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const react_1 = require("react");
const react_native_1 = require("react-native");
const hasLoopSupport = false;
class Indicator extends react_1.PureComponent {
    constructor(props) {
        super(props);
        this.renderComponent = this.renderComponent.bind(this);
        this.startAnimation = this.startAnimation.bind(this);
        this.stopAnimation = this.stopAnimation.bind(this);
        this.state = {
            progress: new react_native_1.Animated.Value(0)
        };
        this.mounted = false;
    }
    startAnimation({ finished } = { finished: true }) {
        let { progress } = this.state;
        let { interaction, animationEasing, animationDuration } = this.props;
        if (!this.mounted || finished === false) {
            return;
        }
        let animation = react_native_1.Animated.timing(progress, {
            duration: animationDuration,
            easing: animationEasing,
            useNativeDriver: true,
            isInteraction: interaction,
            toValue: 1
        });
        if (hasLoopSupport) {
            react_native_1.Animated
                .loop(animation)
                .start();
        }
        else {
            progress.setValue(0);
            animation.start(this.startAnimation);
        }
        this.setState({ animation });
    }
    stopAnimation() {
        let { animation } = this.state;
        if (animation == null) {
            return;
        }
        animation.stop();
        this.setState({ animation: null });
    }
    componentDidMount() {
        let { animating } = this.props;
        this.mounted = true;
        if (animating) {
            this.startAnimation();
        }
    }
    componentWillUnmount() {
        this.mounted = false;
    }
    componentWillReceiveProps(props) {
        let { animating } = this.props;
        if (animating ^ props.animating) {
            if (animating) {
                this.stopAnimation();
            }
            else {
                this.startAnimation();
            }
        }
    }
    renderComponent(undefined, index) {
        undefined = undefined;
        let { progress } = this.state;
        let { renderComponent, count } = this.props;
        if (typeof renderComponent === 'function') {
            return renderComponent({ index, count, progress });
        }
        else {
            return null;
        }
    }
    render() {
        let _a = this.props, { count } = _a, props = __rest(_a, ["count"]);
        return (React.createElement(react_native_1.Animated.View, Object.assign({}, props), Array.from(new Array(count), this.renderComponent)));
    }
}
Indicator.defaultProps = {
    animationEasing: react_native_1.Easing.linear,
    animationDuration: 1200,
    animating: true,
    interaction: true,
    count: 1
};
exports.default = Indicator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,