a5e1c9345d328eb0abe9bb60f3919076
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const react_native_1 = require("react-native");
const MaterialCommunityIcons_1 = require("react-native-vector-icons/MaterialCommunityIcons");
class MaterialRadioGroup extends React.Component {
    constructor(props) {
        super(props);
        this.renderListItems = (item, index) => {
            return (!this.props.isRtl ?
                React.createElement(react_native_1.TouchableWithoutFeedback, { onPress: () => this.onItemPress(item, index) },
                    React.createElement(react_native_1.View, { style: { flexDirection: 'row', alignItems: 'center', justifyContent: 'flex-start' } },
                        React.createElement(MaterialCommunityIcons_1.default, { style: { margin: 8 }, name: index === this.state.selected ? "radiobox-marked" : "radiobox-blank", size: 24, color: index === this.state.selected ? this.props.color : "grey" }),
                        React.createElement(react_native_1.Text, { style: {
                                fontFamily: this.props.textFont,
                                color: this.props.textColor,
                                fontSize: 14
                            } }, item.text)))
                :
                    React.createElement(react_native_1.TouchableWithoutFeedback, { onPress: () => this.onItemPress(item, index) },
                        React.createElement(react_native_1.View, { style: { flexDirection: 'row', alignItems: 'center', justifyContent: 'flex-end' } },
                            React.createElement(react_native_1.Text, { style: {
                                    fontFamily: this.props.textFont,
                                    color: this.props.textColor,
                                    fontSize: 14
                                } }, item.text),
                            React.createElement(MaterialCommunityIcons_1.default, { style: { margin: 8 }, name: index === this.state.selected ? "radiobox-marked" : "radiobox-blank", size: 24, color: index === this.state.selected ? this.props.color : "grey" }))));
        };
        this.onItemPress = (item, index) => {
            this.setState({ selected: index });
            this.props.onItemPress(item, index);
        };
        this.state = {
            selected: -1
        };
    }
    render() {
        return (React.createElement(react_native_1.FlatList, { data: this.props.data, extraData: this.state, keyExtractor: ([], index) => index.toString(), renderItem: ({ item, index }) => this.renderListItems(item, index) }));
    }
}
MaterialRadioGroup.defaultProps = {
    onItemPress: () => { },
    textColor: 'black'
};
exports.default = MaterialRadioGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXENvZGluZ1Byb2plY3RzXFxHaXRodWJcXHR5cGVzY3JpcHQtbWF0ZXJpYWwtdWktY29sbGVjdGlvblxcRXhhbXBsZUFuZFRlc3RcXGxpYlxcQ29tcG9uZW50c1xcTWF0ZXJpYWxSYWRpb0dyb3VwXFxpbmRleC50c3giLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBOEI7QUFDOUIsK0NBQTJFO0FBQzNFLDZGQUFxRjtBQWlCckYsTUFBcUIsa0JBQW1CLFNBQVEsS0FBSyxDQUFDLFNBQTREO0lBQ2hILFlBQVksS0FBSztRQUNmLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQXNCZixvQkFBZSxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ2hDLE9BQU8sQ0FDTCxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFBLENBQUM7Z0JBQ2xCLG9CQUFDLHVDQUF3QixJQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7b0JBQ3BFLG9CQUFDLG1CQUFJLElBQUMsS0FBSyxFQUFFLEVBQUMsYUFBYSxFQUFFLEtBQUssRUFBQyxVQUFVLEVBQUMsUUFBUSxFQUFDLGNBQWMsRUFBQyxZQUFZLEVBQUM7d0JBQ2pGLG9CQUFDLGdDQUFzQixJQUNyQixLQUFLLEVBQUUsRUFBQyxNQUFNLEVBQUUsQ0FBQyxFQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLElBQUksRUFBRSxFQUFFLEVBQ3hHLEtBQUssRUFBRSxLQUFLLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQ2hFO3dCQUNGLG9CQUFDLG1CQUFJLElBQUMsS0FBSyxFQUFFO2dDQUNYLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVE7Z0NBQy9CLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVM7Z0NBQzNCLFFBQVEsRUFBRSxFQUFFOzZCQUNiLElBQUcsSUFBSSxDQUFDLElBQUksQ0FBUSxDQUNoQixDQUNrQjtnQkFDekIsQ0FBQztvQkFDRCxvQkFBQyx1Q0FBd0IsSUFBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO3dCQUNwRSxvQkFBQyxtQkFBSSxJQUFDLEtBQUssRUFBRSxFQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBQyxjQUFjLEVBQUMsVUFBVSxFQUFDOzRCQUMvRSxvQkFBQyxtQkFBSSxJQUFDLEtBQUssRUFBRTtvQ0FDWCxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRO29DQUMvQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTO29DQUMzQixRQUFRLEVBQUUsRUFBRTtpQ0FDYixJQUFHLElBQUksQ0FBQyxJQUFJLENBQVE7NEJBQ3JCLG9CQUFDLGdDQUFzQixJQUNyQixLQUFLLEVBQUUsRUFBQyxNQUFNLEVBQUUsQ0FBQyxFQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLElBQUksRUFBRSxFQUFFLEVBQ3hHLEtBQUssRUFBRSxLQUFLLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQ2hFLENBRUcsQ0FDa0IsQ0FDOUIsQ0FBQTtRQUNILENBQUMsQ0FBQztRQUVGLGdCQUFXLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDNUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUE7UUExREMsSUFBSSxDQUFDLEtBQUssR0FBRztZQUNYLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDYixDQUFBO0lBQ0gsQ0FBQztJQU9ELE1BQU07UUFDSixPQUFPLENBQ0wsb0JBQUMsdUJBQVEsSUFDUCxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQ3JCLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUNyQixZQUFZLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQzdDLFVBQVUsRUFBRSxDQUFDLEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsR0FDaEUsQ0FDSCxDQUFBO0lBQ0gsQ0FBQzs7QUFkTSwrQkFBWSxHQUFHO0lBQ3BCLFdBQVcsRUFBRSxHQUFHLEVBQUUsR0FBRSxDQUFDO0lBQ3JCLFNBQVMsRUFBQyxPQUFPO0NBQ2xCLENBQUM7QUFYSixxQ0E4REMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRDpcXENvZGluZ1Byb2plY3RzXFxHaXRodWJcXHR5cGVzY3JpcHQtbWF0ZXJpYWwtdWktY29sbGVjdGlvblxcRXhhbXBsZUFuZFRlc3RcXGxpYlxcQ29tcG9uZW50c1xcTWF0ZXJpYWxSYWRpb0dyb3VwXFxpbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQge0ZsYXRMaXN0LCBUZXh0LCBUb3VjaGFibGVXaXRob3V0RmVlZGJhY2ssIFZpZXd9IGZyb20gJ3JlYWN0LW5hdGl2ZSdcbmltcG9ydCBNYXRlcmlhbENvbW11bml0eUljb25zIGZyb20gJ3JlYWN0LW5hdGl2ZS12ZWN0b3ItaWNvbnMvTWF0ZXJpYWxDb21tdW5pdHlJY29ucydcblxuLy8gU3R5bGVzXG5cbmludGVyZmFjZSBNYXRlcmlhbFJhZGlvR3JvdXBQcm9wcyB7XG4gIGRhdGE6IGFueSxcbiAgY29sb3I6IHN0cmluZyxcbiAgdGV4dEZvbnQ/OiBzdHJpbmcsXG4gIHRleHRDb2xvcj86IHN0cmluZyxcbiAgaXNSdGw/OmJvb2xlYW4sXG4gIG9uSXRlbVByZXNzPyhpdGVtLCBpbmRleCk6IHZvaWRcbn1cblxuaW50ZXJmYWNlIE1hdGVyaWFsUmFkaW9Hcm91cFN0YXRlIHtcbiAgc2VsZWN0ZWQ6IG51bWJlclxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXRlcmlhbFJhZGlvR3JvdXAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQgPE1hdGVyaWFsUmFkaW9Hcm91cFByb3BzLCBNYXRlcmlhbFJhZGlvR3JvdXBTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgc2VsZWN0ZWQ6IC0xXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBvbkl0ZW1QcmVzczogKCkgPT4ge30sXG4gICAgdGV4dENvbG9yOidibGFjaydcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxGbGF0TGlzdFxuICAgICAgICBkYXRhPXt0aGlzLnByb3BzLmRhdGF9XG4gICAgICAgIGV4dHJhRGF0YT17dGhpcy5zdGF0ZX1cbiAgICAgICAga2V5RXh0cmFjdG9yPXsoW10sIGluZGV4KSA9PiBpbmRleC50b1N0cmluZygpfVxuICAgICAgICByZW5kZXJJdGVtPXsoe2l0ZW0sIGluZGV4fSkgPT4gdGhpcy5yZW5kZXJMaXN0SXRlbXMoaXRlbSwgaW5kZXgpfVxuICAgICAgLz5cbiAgICApXG4gIH1cblxuICByZW5kZXJMaXN0SXRlbXMgPSAoaXRlbSwgaW5kZXgpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgIXRoaXMucHJvcHMuaXNSdGw/XG4gICAgICA8VG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrIG9uUHJlc3M9eygpID0+IHRoaXMub25JdGVtUHJlc3MoaXRlbSwgaW5kZXgpfT5cbiAgICAgICAgPFZpZXcgc3R5bGU9e3tmbGV4RGlyZWN0aW9uOiAncm93JyxhbGlnbkl0ZW1zOidjZW50ZXInLGp1c3RpZnlDb250ZW50OidmbGV4LXN0YXJ0J319PlxuICAgICAgICAgIDxNYXRlcmlhbENvbW11bml0eUljb25zXG4gICAgICAgICAgICBzdHlsZT17e21hcmdpbjogOH19IG5hbWU9e2luZGV4ID09PSB0aGlzLnN0YXRlLnNlbGVjdGVkID8gXCJyYWRpb2JveC1tYXJrZWRcIiA6IFwicmFkaW9ib3gtYmxhbmtcIn0gc2l6ZT17MjR9XG4gICAgICAgICAgICBjb2xvcj17aW5kZXggPT09IHRoaXMuc3RhdGUuc2VsZWN0ZWQgPyB0aGlzLnByb3BzLmNvbG9yIDogXCJncmV5XCJ9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8VGV4dCBzdHlsZT17e1xuICAgICAgICAgICAgZm9udEZhbWlseTogdGhpcy5wcm9wcy50ZXh0Rm9udCxcbiAgICAgICAgICAgIGNvbG9yOiB0aGlzLnByb3BzLnRleHRDb2xvcixcbiAgICAgICAgICAgIGZvbnRTaXplOiAxNFxuICAgICAgICAgIH19PntpdGVtLnRleHR9PC9UZXh0PlxuICAgICAgICA8L1ZpZXc+XG4gICAgICA8L1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFjaz5cbiAgICAgICAgOlxuICAgICAgICA8VG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrIG9uUHJlc3M9eygpID0+IHRoaXMub25JdGVtUHJlc3MoaXRlbSwgaW5kZXgpfT5cbiAgICAgICAgICA8VmlldyBzdHlsZT17e2ZsZXhEaXJlY3Rpb246ICdyb3cnLGFsaWduSXRlbXM6J2NlbnRlcicsanVzdGlmeUNvbnRlbnQ6J2ZsZXgtZW5kJ319PlxuICAgICAgICAgICAgPFRleHQgc3R5bGU9e3tcbiAgICAgICAgICAgICAgZm9udEZhbWlseTogdGhpcy5wcm9wcy50ZXh0Rm9udCxcbiAgICAgICAgICAgICAgY29sb3I6IHRoaXMucHJvcHMudGV4dENvbG9yLFxuICAgICAgICAgICAgICBmb250U2l6ZTogMTRcbiAgICAgICAgICAgIH19PntpdGVtLnRleHR9PC9UZXh0PlxuICAgICAgICAgICAgPE1hdGVyaWFsQ29tbXVuaXR5SWNvbnNcbiAgICAgICAgICAgICAgc3R5bGU9e3ttYXJnaW46IDh9fSBuYW1lPXtpbmRleCA9PT0gdGhpcy5zdGF0ZS5zZWxlY3RlZCA/IFwicmFkaW9ib3gtbWFya2VkXCIgOiBcInJhZGlvYm94LWJsYW5rXCJ9IHNpemU9ezI0fVxuICAgICAgICAgICAgICBjb2xvcj17aW5kZXggPT09IHRoaXMuc3RhdGUuc2VsZWN0ZWQgPyB0aGlzLnByb3BzLmNvbG9yIDogXCJncmV5XCJ9XG4gICAgICAgICAgICAvPlxuXG4gICAgICAgICAgPC9WaWV3PlxuICAgICAgICA8L1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFjaz5cbiAgICApXG4gIH07XG5cbiAgb25JdGVtUHJlc3MgPSAoaXRlbSwgaW5kZXgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHtzZWxlY3RlZDogaW5kZXh9KTtcbiAgICB0aGlzLnByb3BzLm9uSXRlbVByZXNzKGl0ZW0sIGluZGV4KTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9