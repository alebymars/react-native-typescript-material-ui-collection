{"file":"D:\\CodingProjects\\Github\\typescript-material-ui-collection\\ExampleAndTest\\lib\\Components\\MaterialSwitch\\Switch.tsx","mappings":";;AAAA,+BAA8B;AAC9B,+CAAqE;AAWrE,MAAqB,MAAO,SAAQ,KAAK,CAAC,SAAoC;IAC5E,YAAY,KAAK;QACf,KAAK,CAAC,KAAK,CAAC,CAAC;QAGf,oBAAe,GAAG,IAAI,uBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAmCxC,YAAO,GAAG,GAAG,EAAE;YACb,IAAI,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,KAAK,EAAC,EAAE,GAAG,EAAE;gBACpC,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;oBAC7B,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;iBAClC;YACH,CAAC,CAAC,CAAC;YACH,uBAAQ,CAAC,MAAM,CACb,IAAI,CAAC,eAAe,EACpB;gBACE,eAAe,EAAE,IAAI;gBACrB,OAAO,EAAE,CAAC;gBACV,QAAQ,EAAE,GAAG;aACd,CACF,CAAC,KAAK,EAAE,CAAC;QACZ,CAAC,CAAC;QACF,WAAM,GAAG,GAAG,EAAE;YACZ,IAAI,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,EAAE,GAAG,EAAE;gBACnC,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;oBAC7B,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;iBACjC;YACH,CAAC,CAAC,CAAC;YACH,uBAAQ,CAAC,MAAM,CACb,IAAI,CAAC,eAAe,EACpB;gBACE,eAAe,EAAE,IAAI;gBACrB,OAAO,EAAE,EAAE;gBACX,QAAQ,EAAE,GAAG;aACd,CACF,CAAC,KAAK,EAAE,CAAC;QACZ,CAAC,CAAA;QAlEC,IAAI,CAAC,KAAK,GAAG,EAAC,QAAQ,EAAE,KAAK,EAAC,CAAA;IAChC,CAAC;IAED,MAAM;QACJ,OAAO,CACL,oBAAC,uCAAwB,IAAC,OAAO,EAAE,GAAE,EAAE,GAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAA,CAAC,CAAA,IAAI,CAAC,OAAO,EAAE,CAAA,CAAC,CAAA,IAAI,CAAC,MAAM,EAAE,CAAA,CAAA,CAAC;YACvF,oBAAC,uBAAQ,CAAC,IAAI,IAAC,KAAK,EAAE,EAAC,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,cAAc,EAAE,QAAQ,EAAC;gBACrE,oBAAC,mBAAI,IAAC,KAAK,EAAE;wBACX,QAAQ,EAAE,UAAU;wBACpB,KAAK,EAAE,MAAM;wBACb,MAAM,EAAE,EAAE;wBACV,OAAO,EAAE,GAAG;wBACZ,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS;wBACnE,YAAY,EAAE,EAAE;qBACjB,GAAG;gBACJ,oBAAC,uBAAQ,CAAC,IAAI,IAAC,KAAK,EAAE;wBACpB,SAAS,EAAE;4BACT,EAAC,UAAU,EAAE,IAAI,CAAC,eAAe,EAAC;yBACnC;wBACD,KAAK,EAAE,EAAE;wBACT,MAAM,EAAE,EAAE;wBACV,YAAY,EAAE,EAAE;wBAChB,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO;wBACjE,SAAS,EAAE,CAAC;wBACZ,WAAW,EAAC,OAAO;wBACnB,YAAY,EAAE;4BACZ,KAAK,EAAE,CAAC;4BACR,MAAM,EAAE,CAAC;yBACV;wBACD,YAAY,EAAE,CAAC;wBACf,aAAa,EAAE,IAAI;qBACpB,GAAG,CACU,CACS,CAC5B,CAAA;IACH,CAAC;CAiCF;AAvED,yBAuEC","names":[],"sources":["D:\\CodingProjects\\Github\\typescript-material-ui-collection\\ExampleAndTest\\lib\\Components\\MaterialSwitch\\Switch.tsx"],"sourcesContent":["import * as React from 'react'\nimport {View, TouchableWithoutFeedback, Animated} from 'react-native'\n\ninterface SwitchProps {\n  color: string,\n  onValueChanged?(value:boolean):void\n}\n\ninterface SwitchState {\n  isActive: boolean\n}\n\nexport default class Switch extends React.Component <SwitchProps, SwitchState> {\n  constructor(props) {\n    super(props);\n    this.state = {isActive: false}\n  }\n  ButtonTransform = new Animated.Value(0);\n  render() {\n    return (\n      <TouchableWithoutFeedback onPress={()=>{this.state.isActive?this.disable():this.enable()}}>\n        <Animated.View style={{width: 36, height: 20, justifyContent: 'center'}}>\n          <View style={{\n            position: 'absolute',\n            width: '100%',\n            height: 16,\n            opacity: 0.5,\n            backgroundColor: this.state.isActive ? this.props.color : '#212121',\n            borderRadius: 10\n          }}/>\n          <Animated.View style={{\n            transform: [\n              {translateX: this.ButtonTransform},\n            ],\n            width: 20,\n            height: 20,\n            borderRadius: 10,\n            backgroundColor: this.state.isActive ? this.props.color : 'white',\n            elevation: 2,\n            shadowColor:'black',\n            shadowOffset: {\n              width: 0,\n              height: 2\n            },\n            shadowRadius: 2,\n            shadowOpacity: 0.24\n          }}/>\n        </Animated.View>\n      </TouchableWithoutFeedback>\n    )\n  }\n\n  disable = () => {\n    this.setState({isActive: false}, () => {\n      if (this.props.onValueChanged) {\n        this.props.onValueChanged(false);\n      }\n    });\n    Animated.timing(\n      this.ButtonTransform,\n      {\n        useNativeDriver: true,\n        toValue: 0,\n        duration: 100,\n      }\n    ).start();\n  };\n  enable = () => {\n    this.setState({isActive: true}, () => {\n      if (this.props.onValueChanged) {\n        this.props.onValueChanged(true);\n      }\n    });\n    Animated.timing(\n      this.ButtonTransform,\n      {\n        useNativeDriver: true,\n        toValue: 16,\n        duration: 100,\n      }\n    ).start();\n  }\n\n}\n"],"version":3}