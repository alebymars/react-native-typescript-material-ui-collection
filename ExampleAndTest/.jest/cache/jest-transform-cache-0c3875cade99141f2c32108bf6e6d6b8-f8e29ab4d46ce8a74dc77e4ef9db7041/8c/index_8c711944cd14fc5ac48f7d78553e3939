20b4d429210798553d6aa72011ba220d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const react_1 = require("react");
const react_native_1 = require("react-native");
const MaterialCommunityIcons_1 = require("react-native-vector-icons/MaterialCommunityIcons");
const react_native_material_ripple_1 = require("react-native-material-ripple");
// Styles
const navBarHeight = (react_native_1.Platform.OS === "ios") ? 64 : 54;
const { width, height } = react_native_1.Dimensions.get("window");
const screenHeight = width < height ? height : width;
class MaterialBackdrop extends react_1.Component {
    constructor(props) {
        super(props);
        this.ViewScale = new react_native_1.Animated.Value(0);
        this.collapse = () => {
            this.setState({ isExpanded: false }, () => {
                if (this.props.onCollapse) {
                    this.props.onCollapse();
                }
            });
            react_native_1.Animated.timing(this.ViewScale, {
                useNativeDriver: true,
                toValue: 0,
                duration: 200,
            }).start();
        };
        this.expand = () => {
            this.setState({ isExpanded: true }, () => {
                if (this.props.onExpand) {
                    this.props.onExpand();
                }
            });
            react_native_1.Animated.timing(this.ViewScale, {
                useNativeDriver: true,
                toValue: this.state.height,
                duration: 200,
            }).start();
        };
        this.state = { isExpanded: false, height: 0 };
    }
    render() {
        return (React.createElement(react_native_1.View, { style: { flex: 1 } },
            React.createElement(react_native_1.View, { style: {
                    backgroundColor: this.props.backdropBackgroundColor,
                    paddingTop: navBarHeight,
                    height: screenHeight,
                    paddingBottom: 16,
                } },
                this.props.leftButtonIcon &&
                    React.createElement(react_native_material_ripple_1.default, { style: {
                            width: 56,
                            height: 56,
                            position: 'absolute',
                            left: 0,
                            top: 0,
                            alignItems: 'center',
                            justifyContent: 'center'
                        }, onPress: () => {
                            if (this.props.onLeftButtonClick) {
                                this.props.onLeftButtonClick();
                            }
                            this.state.isExpanded ? this.collapse() : this.expand();
                        } },
                        React.createElement(MaterialCommunityIcons_1.default, { name: this.props.leftButtonIcon, size: 24, color: this.props.textColor })),
                this.props.rightButtonIcon &&
                    React.createElement(react_native_material_ripple_1.default, { style: {
                            width: 56,
                            height: 56,
                            position: 'absolute',
                            right: 0,
                            top: 0,
                            alignItems: 'center',
                            justifyContent: 'center'
                        }, onPress: () => {
                            if (this.props.onRightButtonClick) {
                                this.props.onRightButtonClick();
                            }
                            this.state.isExpanded ? this.collapse() : this.expand();
                        } },
                        React.createElement(MaterialCommunityIcons_1.default, { name: this.props.rightButtonIcon, size: 24, color: this.props.textColor })),
                React.createElement(react_native_1.Text, { style: {
                        alignSelf: 'center',
                        position: 'absolute',
                        color: this.props.textColor,
                        top: 18
                    } }, this.state.isExpanded ? this.props.expandedTitle : this.props.collapsedTitle),
                React.createElement(react_native_1.Animated.View, null,
                    React.createElement(react_native_1.ScrollView, { style: { position: 'absolute', width: '100%', maxHeight: screenHeight - navBarHeight }, onLayout: (event) => {
                            const { height } = event.nativeEvent.layout;
                            this.setState({ height: height > screenHeight - navBarHeight - 1 ? screenHeight - 2 * navBarHeight - 16 : height });
                        } }, this.props.revealComponent()))),
            React.createElement(react_native_1.Animated.View, { style: {
                    transform: [
                        { translateY: this.ViewScale },
                    ],
                    position: 'absolute',
                    top: navBarHeight,
                    backgroundColor: this.props.contentBackgroundColor,
                    flex: 1,
                    right: 0,
                    left: 0,
                    maxHeight: screenHeight - navBarHeight,
                    borderTopLeftRadius: 16,
                    borderTopRightRadius: 16,
                    minHeight: navBarHeight,
                    elevation: 4,
                    shadowColor: 'black',
                    shadowOffset: {
                        width: 0,
                        height: 4
                    },
                    shadowRadius: 4,
                    shadowOpacity: 0.24
                } },
                this.props.subHeaderText &&
                    React.createElement(react_native_1.TouchableWithoutFeedback, { onPress: () => {
                            this.collapse();
                            if (this.props.onSubheaderClick) {
                                this.props.onSubheaderClick();
                            }
                        }, style: { height: 40, paddingBottom: 8, width: '100%' } },
                        React.createElement(react_native_1.Text, { style: { margin: 16, fontSize: 16, color: this.props.subheaderTextColor } }, this.props.subHeaderText)),
                React.createElement(react_native_1.ScrollView, { horizontal: this.props.horizontalContent, style: { width: '100%', padding: 16, marginTop: 16 } }, this.props.content()))));
    }
}
exports.default = MaterialBackdrop;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,