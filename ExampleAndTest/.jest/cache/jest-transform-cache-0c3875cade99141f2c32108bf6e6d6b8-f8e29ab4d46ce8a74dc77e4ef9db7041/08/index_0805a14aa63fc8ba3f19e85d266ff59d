32a7c07c6bc6c3e267f9a64e11c44afd
"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const react_1 = require("react");
const react_native_1 = require("react-native");
const indicator_1 = require("../indicator");
const styles_1 = require("./styles");
class MaterialIndicator extends react_1.PureComponent {
    constructor(props) {
        super(props);
        this.renderComponent = this.renderComponent.bind(this);
    }
    renderComponent({ index, count, progress }) {
        count = count;
        let { size, color, animationDuration } = this.props;
        let frames = 60 * animationDuration / 1000;
        let easing = react_native_1.Easing.bezier(0.4, 0.0, 0.7, 1.0);
        let inputRange = Array
            .from(new Array(frames), (undefined = { undefined }, frameIndex) => frameIndex / (frames - 1));
        let outputRange = Array
            .from(new Array(frames), (undefined, frameIndex) => {
            undefined = undefined;
            let progress = 2 * frameIndex / (frames - 1);
            let rotation = index
                ? +(360 - 15)
                : -(180 - 15);
            if (progress > 1.0) {
                progress = 2.0 - progress;
            }
            let direction = index
                ? -1
                : +1;
            return (direction * (180 - 30) * easing(progress) + rotation) + 'deg';
        });
        let layerStyle = {
            width: size,
            height: size,
            transform: [{
                    rotate: progress.interpolate({
                        inputRange: [0, 1],
                        outputRange: [(0 + 30 + 15) + 'deg', (2 * 360 + 30 + 15) + 'deg']
                    })
                }]
        };
        let viewportStyle = {
            width: size,
            height: size,
            transform: [{
                    translateY: index ? -size / 2 : 0
                }, {
                    rotate: progress.interpolate({ inputRange, outputRange })
                }]
        };
        let containerStyle = {
            width: size,
            height: size / 2,
            overflow: 'hidden'
        };
        let offsetStyle = index
            ? { top: size / 2 }
            : null;
        let lineStyle = {
            width: size,
            height: size,
            borderColor: color,
            borderWidth: size / 10,
            borderRadius: size / 2
        };
        return (React.createElement(react_native_1.Animated.View, Object.assign({ style: styles_1.default.layer }, { key: index }),
            React.createElement(react_native_1.Animated.View, { style: layerStyle },
                React.createElement(react_native_1.Animated.View, { style: [containerStyle, offsetStyle], collapsable: false },
                    React.createElement(react_native_1.Animated.View, { style: viewportStyle },
                        React.createElement(react_native_1.Animated.View, { style: containerStyle, collapsable: false },
                            React.createElement(react_native_1.Animated.View, { style: lineStyle })))))));
    }
    render() {
        let _a = this.props, { style, size: width, size: height } = _a, props = __rest(_a, ["style", "size", "size"]);
        return (React.createElement(react_native_1.View, { style: [styles_1.default.container, style] },
            React.createElement(indicator_1.default, Object.assign({ style: { width, height }, renderComponent: this.renderComponent }, props, { count: 2 }))));
    }
}
MaterialIndicator.defaultProps = {
    animationDuration: 2400,
    color: 'rgb(0, 0, 0)',
    size: 40
};
exports.default = MaterialIndicator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,