6a5f0c1d9018d9e1c2653155517a4271
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const react_native_1 = require("react-native");
const react_native_material_ripple_1 = require("react-native-material-ripple");
const MaterialCommunityIcons_1 = require("react-native-vector-icons/MaterialCommunityIcons");
const __1 = require("../..");
const react_1 = require("react");
class MaterialCheckbox extends react_1.PureComponent {
    constructor(props) {
        super(props);
        this.state = {
            isChecked: props.isChecked
        };
    }
    render() {
        return (!this.props.rtl ?
            React.createElement(__1.MaterialHorizontalLinear, null,
                !this.props.progress ?
                    React.createElement(react_native_material_ripple_1.default, { rippleColor: this.props.textColor, onPress: () => {
                            this.setState({ isChecked: !this.state.isChecked }, () => {
                                this.props.onCheckedChange(this.state.isChecked);
                            });
                        }, style: {
                            borderRadius: 4,
                            height: 36,
                            overflow: 'hidden',
                            alignItems: 'center',
                            justifyContent: 'center'
                        } },
                        React.createElement(MaterialCommunityIcons_1.default, { style: { margin: 8 }, name: this.state.isChecked ? "checkbox-marked" : "checkbox-blank-outline", size: 24, color: this.state.isChecked ? this.props.checkBoxColor : "grey" }))
                    :
                        React.createElement(react_native_1.View, { style: { margin: 8 } },
                            React.createElement(__1.MaterialProgress, { color: this.props.checkBoxColor, small: true })),
                React.createElement(react_native_1.Text, { style: {
                        fontFamily: this.props.textFont,
                        color: this.props.textColor,
                        fontSize: 14
                    } }, this.props.text))
            :
                React.createElement(__1.MaterialHorizontalLinear, null,
                    React.createElement(react_native_1.Text, { style: {
                            fontFamily: this.props.textFont,
                            color: this.props.textColor,
                            fontSize: 14
                        } }, this.props.text),
                    !this.props.progress ?
                        React.createElement(react_native_material_ripple_1.default, { rippleColor: this.props.textColor, onPress: () => {
                                this.setState({ isChecked: !this.state.isChecked }, () => {
                                    this.props.onCheckedChange(this.state.isChecked);
                                });
                            }, style: {
                                borderRadius: 4,
                                height: 36,
                                overflow: 'hidden',
                                alignItems: 'center',
                                justifyContent: 'center'
                            } },
                            React.createElement(MaterialCommunityIcons_1.default, { style: { margin: 8 }, name: this.state.isChecked ? "checkbox-marked" : "checkbox-blank-outline", size: 24, color: this.state.isChecked ? this.props.checkBoxColor : "grey" }))
                        :
                            React.createElement(react_native_1.View, { style: { margin: 8 } },
                                React.createElement(__1.MaterialProgress, { color: this.props.checkBoxColor, small: true }))));
    }
}
exports.default = MaterialCheckbox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,