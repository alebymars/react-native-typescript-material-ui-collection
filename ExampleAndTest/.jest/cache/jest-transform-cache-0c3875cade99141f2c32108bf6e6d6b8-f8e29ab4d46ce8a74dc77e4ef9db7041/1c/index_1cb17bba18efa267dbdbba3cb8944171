5d9a0b1fac3c7b9d5a68f7d3222fc670
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const react_native_1 = require("react-native");
const MaterialCommunityIcons_1 = require("react-native-vector-icons/MaterialCommunityIcons");
const react_native_material_ripple_1 = require("react-native-material-ripple");
class MaterialToolbar extends React.Component {
    constructor(props) {
        super(props);
        this.state = { isTyping: false };
    }
    render() {
        return (React.createElement(react_native_1.View, { style: {
                alignItems: 'center',
                justifyContent: 'center',
                height: 56,
                flex: 1,
                flexDirection: 'row'
            } },
            this.state.isTyping ?
                React.createElement(react_native_1.TextInput, { onChangeText: (text) => this.props.onChangeText(text), style: { marginBottom: 4, paddingBottom: 0, borderBottomWidth: 1, borderBottomColor: this.props.color, flex: 1, alignSelf: 'center', fontSize: 16, color: this.props.color, fontFamily: this.props.font } })
                :
                    React.createElement(react_native_1.Text, { style: {
                            flex: 1,
                            alignSelf: 'center',
                            fontSize: 16,
                            color: this.props.color,
                            fontFamily: this.props.font
                        } }, this.props.text),
            this.props.haveTypeMode &&
                React.createElement(react_native_material_ripple_1.default, { onPress: () => {
                        this.setState({ isTyping: !this.state.isTyping });
                        this.props.onTypeModePress();
                    }, style: { borderRadius: 28, overflow: 'hidden', width: 56, height: 56, alignItems: 'center', justifyContent: 'center' } },
                    React.createElement(MaterialCommunityIcons_1.default, { style: { margin: 8 }, name: this.state.isTyping ? 'close' : this.props.typeModeIcon, size: 24, color: this.props.color }))));
    }
}
MaterialToolbar.defaultProps = {
    color: '#212121',
    typeModeIcon: 'magnify',
    onTypeModePress: () => {
    },
    onChangeText: () => { }
};
exports.default = MaterialToolbar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXENvZGluZ1Byb2plY3RzXFxHaXRodWJcXHR5cGVzY3JpcHQtbWF0ZXJpYWwtdWktY29sbGVjdGlvblxcRXhhbXBsZUFuZFRlc3RcXGxpYlxcQ29tcG9uZW50c1xcTWF0ZXJpYWxUb29sYmFyQ29udGVudFxcaW5kZXgudHN4IiwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQThCO0FBQzlCLCtDQUFtRDtBQUNuRCw2RkFBcUY7QUFDckYsK0VBQWtEO0FBa0JsRCxNQUFxQixlQUFnQixTQUFRLEtBQUssQ0FBQyxTQUFzRDtJQUN2RyxZQUFZLEtBQUs7UUFDZixLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUMsUUFBUSxFQUFFLEtBQUssRUFBQyxDQUFBO0lBRWhDLENBQUM7SUFVRCxNQUFNO1FBQ0osT0FBTyxDQUNMLG9CQUFDLG1CQUFJLElBQ0gsS0FBSyxFQUFFO2dCQUNMLFVBQVUsRUFBRSxRQUFRO2dCQUNwQixjQUFjLEVBQUUsUUFBUTtnQkFDeEIsTUFBTSxFQUFFLEVBQUU7Z0JBQ1YsSUFBSSxFQUFFLENBQUM7Z0JBQ1AsYUFBYSxFQUFFLEtBQUs7YUFDckI7WUFDQSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUNwQixvQkFBQyx3QkFBUyxJQUNSLFlBQVksRUFBRSxDQUFDLElBQUksRUFBQyxFQUFFLENBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQ25ELEtBQUssRUFBRSxFQUFDLFlBQVksRUFBQyxDQUFDLEVBQUMsYUFBYSxFQUFDLENBQUMsRUFBQyxpQkFBaUIsRUFBQyxDQUFDLEVBQUMsaUJBQWlCLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBQyxHQUFHO2dCQUNsTSxDQUFDO29CQUNELG9CQUFDLG1CQUFJLElBQ0gsS0FBSyxFQUFFOzRCQUNMLElBQUksRUFBRSxDQUFDOzRCQUNQLFNBQVMsRUFBRSxRQUFROzRCQUNuQixRQUFRLEVBQUUsRUFBRTs0QkFDWixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLOzRCQUN2QixVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJO3lCQUM1QixJQUNBLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNYO1lBRU4sSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZO2dCQUN4QixvQkFBQyxzQ0FBTSxJQUNMLE9BQU8sRUFBRSxHQUFHLEVBQUU7d0JBQ1osSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLFFBQVEsRUFBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFDLENBQUMsQ0FBQzt3QkFDL0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQTtvQkFDOUIsQ0FBQyxFQUNELEtBQUssRUFBRSxFQUFDLFlBQVksRUFBQyxFQUFFLEVBQUMsUUFBUSxFQUFDLFFBQVEsRUFBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFDO29CQUNoSCxvQkFBQyxnQ0FBc0IsSUFDckIsS0FBSyxFQUFFLEVBQUMsTUFBTSxFQUFFLENBQUMsRUFBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUMzRixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQ3ZCLENBQ0ssQ0FFSixDQUNOLENBQUE7SUFDSCxDQUFDOztBQWpEQSw0QkFBWSxHQUFHO0lBQ3BCLEtBQUssRUFBRSxTQUFTO0lBQ2hCLFlBQVksRUFBQyxTQUFTO0lBQ3RCLGVBQWUsRUFBRSxHQUFHLEVBQUU7SUFDdEIsQ0FBQztJQUNELFlBQVksRUFBQyxHQUFFLEVBQUUsR0FBQyxDQUFDO0NBQ3BCLENBQUM7QUFiSixrQ0EwRFMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRDpcXENvZGluZ1Byb2plY3RzXFxHaXRodWJcXHR5cGVzY3JpcHQtbWF0ZXJpYWwtdWktY29sbGVjdGlvblxcRXhhbXBsZUFuZFRlc3RcXGxpYlxcQ29tcG9uZW50c1xcTWF0ZXJpYWxUb29sYmFyQ29udGVudFxcaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtUZXh0LCBWaWV3LCBUZXh0SW5wdXR9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcbmltcG9ydCBNYXRlcmlhbENvbW11bml0eUljb25zIGZyb20gJ3JlYWN0LW5hdGl2ZS12ZWN0b3ItaWNvbnMvTWF0ZXJpYWxDb21tdW5pdHlJY29ucydcbmltcG9ydCBSaXBwbGUgZnJvbSAncmVhY3QtbmF0aXZlLW1hdGVyaWFsLXJpcHBsZSc7XG5cbi8vIFN0eWxlc1xuXG5pbnRlcmZhY2UgTWF0ZXJpYWxUb29sYmFyUHJvcHMge1xuICBjb2xvcj86IHN0cmluZyxcbiAgZm9udD86IHN0cmluZyxcbiAgdGV4dD86IHN0cmluZyxcbiAgaGF2ZVR5cGVNb2RlPzogYm9vbGVhbixcbiAgdHlwZU1vZGVJY29uPzpzdHJpbmcsXG4gIG9uQ2hhbmdlVGV4dD8odGV4dDpzdHJpbmcpLFxuICBvblR5cGVNb2RlUHJlc3M/KCk6IHZvaWQsXG59XG5cbmludGVyZmFjZSBNYXRlcmlhbFRvb2xiYXJTdGF0ZSB7XG4gIGlzVHlwaW5nOiBib29sZWFuXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdGVyaWFsVG9vbGJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCA8TWF0ZXJpYWxUb29sYmFyUHJvcHMsIE1hdGVyaWFsVG9vbGJhclN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7aXNUeXBpbmc6IGZhbHNlfVxuXG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGNvbG9yOiAnIzIxMjEyMScsXG4gICAgdHlwZU1vZGVJY29uOidtYWduaWZ5JyxcbiAgICBvblR5cGVNb2RlUHJlc3M6ICgpID0+IHtcbiAgICB9LFxuICAgIG9uQ2hhbmdlVGV4dDooKT0+e31cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxWaWV3XG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgIGhlaWdodDogNTYsXG4gICAgICAgICAgZmxleDogMSxcbiAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAncm93J1xuICAgICAgICB9fT5cbiAgICAgICAge3RoaXMuc3RhdGUuaXNUeXBpbmcgP1xuICAgICAgICAgIDxUZXh0SW5wdXRcbiAgICAgICAgICAgIG9uQ2hhbmdlVGV4dD17KHRleHQpPT50aGlzLnByb3BzLm9uQ2hhbmdlVGV4dCh0ZXh0KX1cbiAgICAgICAgICAgIHN0eWxlPXt7bWFyZ2luQm90dG9tOjQscGFkZGluZ0JvdHRvbTowLGJvcmRlckJvdHRvbVdpZHRoOjEsYm9yZGVyQm90dG9tQ29sb3I6dGhpcy5wcm9wcy5jb2xvcixmbGV4OiAxLCBhbGlnblNlbGY6ICdjZW50ZXInLCBmb250U2l6ZTogMTYsIGNvbG9yOiB0aGlzLnByb3BzLmNvbG9yLCBmb250RmFtaWx5OiB0aGlzLnByb3BzLmZvbnR9fS8+XG4gICAgICAgICAgICA6XG4gICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIGZsZXg6IDEsXG4gICAgICAgICAgICAgICAgYWxpZ25TZWxmOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogMTYsXG4gICAgICAgICAgICAgICAgY29sb3I6IHRoaXMucHJvcHMuY29sb3IsXG4gICAgICAgICAgICAgICAgZm9udEZhbWlseTogdGhpcy5wcm9wcy5mb250XG4gICAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICB7dGhpcy5wcm9wcy50ZXh0fVxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAge3RoaXMucHJvcHMuaGF2ZVR5cGVNb2RlICYmXG4gICAgICAgICAgICA8UmlwcGxlXG4gICAgICAgICAgICAgIG9uUHJlc3M9eygpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtpc1R5cGluZzohdGhpcy5zdGF0ZS5pc1R5cGluZ30pO1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25UeXBlTW9kZVByZXNzKClcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgc3R5bGU9e3tib3JkZXJSYWRpdXM6Mjgsb3ZlcmZsb3c6J2hpZGRlbicsd2lkdGg6IDU2LCBoZWlnaHQ6IDU2LCBhbGlnbkl0ZW1zOiAnY2VudGVyJywganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInfX0+XG4gICAgICAgICAgICAgIDxNYXRlcmlhbENvbW11bml0eUljb25zXG4gICAgICAgICAgICAgICAgc3R5bGU9e3ttYXJnaW46IDh9fSBuYW1lPXt0aGlzLnN0YXRlLmlzVHlwaW5nID8gJ2Nsb3NlJyA6IHRoaXMucHJvcHMudHlwZU1vZGVJY29ufSBzaXplPXsyNH1cbiAgICAgICAgICAgICAgICBjb2xvcj17dGhpcy5wcm9wcy5jb2xvcn1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvUmlwcGxlPlxuICAgICAgICAgICAgfVxuICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgICApXG4gICAgICAgIH1cblxuICAgICAgICB9XG4iXSwidmVyc2lvbiI6M30=