701c72cba56ac8c79f3e641da51105e9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const react_native_material_ripple_1 = require("react-native-material-ripple");
const MaterialCommunityIcons_1 = require("react-native-vector-icons/MaterialCommunityIcons");
const __1 = require("../..");
exports.default = (props) => React.createElement(react_native_material_ripple_1.default, { rippleColor: props.iconColor, onPress: () => props.onPress(), style: { borderRadius: props.mini ? 20 : 28,
        height: props.mini ? 40 : 56,
        width: props.mini ? 40 : 56,
        backgroundColor: props.color,
        overflow: 'hidden',
        zIndex: 900,
        elevation: 16,
        shadowColor: 'black',
        shadowOffset: {
            width: 0,
            height: 16
        },
        shadowRadius: 16,
        shadowOpacity: 0.24,
        left: props.position === "bottomLeft" || props.position === "topLeft" ? 16 : undefined,
        right: props.position === "bottomRight" || props.position === "topRight" ? 16 : undefined,
        top: props.position === "topRight" || props.position === "topLeft" ? 16 : undefined,
        bottom: props.position === "bottomRight" || props.position === "bottomLeft" ? 16 : undefined,
        position: 'absolute',
        alignItems: 'center',
        justifyContent: 'center' } },
    props.icon ? props.icon :
        (!props.progress && props.iconName) &&
            React.createElement(MaterialCommunityIcons_1.default, { style: { margin: 8 }, name: props.iconName, size: 24, color: props.iconColor }),
    props.progress &&
        React.createElement(__1.MaterialProgress, { color: props.iconColor, small: true }));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXENvZGluZ1Byb2plY3RzXFxHaXRodWJcXHR5cGVzY3JpcHQtbWF0ZXJpYWwtdWktY29sbGVjdGlvblxcRXhhbXBsZUFuZFRlc3RcXGxpYlxcQ29tcG9uZW50c1xcTWF0ZXJpYWxGYWJcXGluZGV4LnRzeCIsIm1hcHBpbmdzIjoiOztBQUFBLCtCQUErQjtBQUMvQiwrRUFBa0Q7QUFDbEQsNkZBQXFGO0FBQ3JGLDZCQUF1QztBQWF2QyxrQkFBZSxDQUFDLEtBQXVCLEVBQUUsRUFBRSxDQUN6QyxvQkFBQyxzQ0FBTSxJQUNMLFdBQVcsRUFBRSxLQUFLLENBQUMsU0FBUyxFQUM1QixPQUFPLEVBQUUsR0FBRSxFQUFFLENBQUEsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUM1QixLQUFLLEVBQUUsRUFBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQSxDQUFDLENBQUEsRUFBRSxDQUFBLENBQUMsQ0FBQSxFQUFFO1FBQ3BDLE1BQU0sRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDMUIsS0FBSyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUMxQixlQUFlLEVBQUMsS0FBSyxDQUFDLEtBQUs7UUFDM0IsUUFBUSxFQUFDLFFBQVE7UUFDakIsTUFBTSxFQUFDLEdBQUc7UUFDVixTQUFTLEVBQUMsRUFBRTtRQUNaLFdBQVcsRUFBQyxPQUFPO1FBQ25CLFlBQVksRUFBRTtZQUNYLEtBQUssRUFBRSxDQUFDO1lBQ1IsTUFBTSxFQUFFLEVBQUU7U0FDWjtRQUNELFlBQVksRUFBRSxFQUFFO1FBQ2hCLGFBQWEsRUFBRSxJQUFJO1FBQ25CLElBQUksRUFBQyxLQUFLLENBQUMsUUFBUSxLQUFLLFlBQVksSUFBRyxLQUFLLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQSxTQUFTO1FBQ2xGLEtBQUssRUFBQyxLQUFLLENBQUMsUUFBUSxLQUFLLGFBQWEsSUFBRyxLQUFLLENBQUMsUUFBUSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQSxTQUFTO1FBQ3JGLEdBQUcsRUFBQyxLQUFLLENBQUMsUUFBUSxLQUFLLFVBQVUsSUFBRyxLQUFLLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQSxTQUFTO1FBQy9FLE1BQU0sRUFBQyxLQUFLLENBQUMsUUFBUSxLQUFLLGFBQWEsSUFBRyxLQUFLLENBQUMsUUFBUSxLQUFLLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQSxTQUFTO1FBQ3hGLFFBQVEsRUFBQyxVQUFVO1FBQ25CLFVBQVUsRUFBRSxRQUFRO1FBQ3BCLGNBQWMsRUFBRSxRQUFRLEVBQUM7SUFDMUIsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUM7WUFDbkMsb0JBQUMsZ0NBQXNCLElBQ3JCLEtBQUssRUFBRSxFQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRyxLQUFLLENBQUMsU0FBUyxHQUMxRTtJQUVILEtBQUssQ0FBQyxRQUFRO1FBQ2Ysb0JBQUMsb0JBQWdCLElBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxTQUFTLEVBQUUsS0FBSyxTQUFFLENBRTFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRDpcXENvZGluZ1Byb2plY3RzXFxHaXRodWJcXHR5cGVzY3JpcHQtbWF0ZXJpYWwtdWktY29sbGVjdGlvblxcRXhhbXBsZUFuZFRlc3RcXGxpYlxcQ29tcG9uZW50c1xcTWF0ZXJpYWxGYWJcXGluZGV4LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBSaXBwbGUgZnJvbSAncmVhY3QtbmF0aXZlLW1hdGVyaWFsLXJpcHBsZSc7XG5pbXBvcnQgTWF0ZXJpYWxDb21tdW5pdHlJY29ucyBmcm9tICdyZWFjdC1uYXRpdmUtdmVjdG9yLWljb25zL01hdGVyaWFsQ29tbXVuaXR5SWNvbnMnXG5pbXBvcnQge01hdGVyaWFsUHJvZ3Jlc3N9IGZyb20gXCIuLi8uLlwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1hdGVyaWFsRmFiUHJvcHMge1xuICBpY29uPzogUmVhY3QuUmVhY3ROb2RlLFxuICBjb2xvcj86c3RyaW5nLFxuICBpY29uQ29sb3I/OiBzdHJpbmcsXG4gIG9uUHJlc3M/KCk6dm9pZCxcbiAgaWNvbk5hbWU6c3RyaW5nLFxuICBtaW5pPzpib29sZWFuLFxuICBwb3NpdGlvbjpzdHJpbmcsLy97J2JvdHRvbUxlZnQnLCd0b3BSaWdodCcsJ3RvcExlZnQnLCdib3R0b21SaWdodCd9XG4gIHByb2dyZXNzPzpib29sZWFuXG59XG5cbmV4cG9ydCBkZWZhdWx0IChwcm9wczogTWF0ZXJpYWxGYWJQcm9wcykgPT5cbiAgPFJpcHBsZVxuICAgIHJpcHBsZUNvbG9yPXtwcm9wcy5pY29uQ29sb3J9XG4gICAgb25QcmVzcz17KCk9PnByb3BzLm9uUHJlc3MoKX1cbiAgICBzdHlsZT17e2JvcmRlclJhZGl1czogcHJvcHMubWluaT8yMDoyOCxcbiAgICAgIGhlaWdodDpwcm9wcy5taW5pPyA0MCA6IDU2LFxuICAgICAgd2lkdGg6IHByb3BzLm1pbmk/IDQwIDogNTYsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6cHJvcHMuY29sb3IsXG4gICAgICBvdmVyZmxvdzonaGlkZGVuJyxcbiAgICAgIHpJbmRleDo5MDAsXG4gICAgICBlbGV2YXRpb246MTYsXG4gICAgICBzaGFkb3dDb2xvcjonYmxhY2snLFxuICAgICAgc2hhZG93T2Zmc2V0OiB7XG4gICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgIGhlaWdodDogMTZcbiAgICAgIH0sXG4gICAgICBzaGFkb3dSYWRpdXM6IDE2LFxuICAgICAgc2hhZG93T3BhY2l0eTogMC4yNCxcbiAgICAgIGxlZnQ6cHJvcHMucG9zaXRpb24gPT09IFwiYm90dG9tTGVmdFwifHwgcHJvcHMucG9zaXRpb24gPT09IFwidG9wTGVmdFwiID8gMTY6dW5kZWZpbmVkLFxuICAgICAgcmlnaHQ6cHJvcHMucG9zaXRpb24gPT09IFwiYm90dG9tUmlnaHRcInx8IHByb3BzLnBvc2l0aW9uID09PSBcInRvcFJpZ2h0XCIgPyAxNjp1bmRlZmluZWQsXG4gICAgICB0b3A6cHJvcHMucG9zaXRpb24gPT09IFwidG9wUmlnaHRcInx8IHByb3BzLnBvc2l0aW9uID09PSBcInRvcExlZnRcIiA/IDE2OnVuZGVmaW5lZCxcbiAgICAgIGJvdHRvbTpwcm9wcy5wb3NpdGlvbiA9PT0gXCJib3R0b21SaWdodFwifHwgcHJvcHMucG9zaXRpb24gPT09IFwiYm90dG9tTGVmdFwiID8gMTY6dW5kZWZpbmVkLFxuICAgICAgcG9zaXRpb246J2Fic29sdXRlJyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInfX0+XG4gICAge3Byb3BzLmljb24gPyBwcm9wcy5pY29uIDpcbiAgICAgICghcHJvcHMucHJvZ3Jlc3MgJiYgcHJvcHMuaWNvbk5hbWUpICYmXG4gICAgICA8TWF0ZXJpYWxDb21tdW5pdHlJY29uc1xuICAgICAgICBzdHlsZT17e21hcmdpbjo4fX0gbmFtZT17cHJvcHMuaWNvbk5hbWV9IHNpemU9ezI0fSBjb2xvcj0ge3Byb3BzLmljb25Db2xvcn1cbiAgICAgIC8+XG4gICAgfVxuICAgIHtwcm9wcy5wcm9ncmVzcyAmJlxuICAgIDxNYXRlcmlhbFByb2dyZXNzIGNvbG9yPXtwcm9wcy5pY29uQ29sb3J9IHNtYWxsLz5cbiAgICB9XG4gIDwvUmlwcGxlPjtcbiJdLCJ2ZXJzaW9uIjozfQ==