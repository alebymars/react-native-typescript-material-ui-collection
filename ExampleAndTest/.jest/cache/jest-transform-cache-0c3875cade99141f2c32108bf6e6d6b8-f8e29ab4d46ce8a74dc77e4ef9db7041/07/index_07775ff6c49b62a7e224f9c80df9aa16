a1ca6cf3b3d6eb3f3eb2e5a15d6df370
"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");var _jsxFileName = "D:\\CodingProjects\\Github\\typescript-material-ui-collection\\ExampleAndTest\\node_modules\\react-native-material-textfield\\src\\components\\label\\index.js";function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};if (desc.get || desc.set) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}}newObj.default = obj;return newObj;}}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}function _objectWithoutProperties(source, excluded) {if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];}}return target;}function _objectWithoutPropertiesLoose(source, excluded) {if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];}return target;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}var

Label = function (_PureComponent) {_inherits(Label, _PureComponent);


































  function Label(props) {var _this;_classCallCheck(this, Label);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Label).call(this, props));

    _this.state = {
      input: new _reactNative.Animated.Value(_this.inputState()),
      focus: new _reactNative.Animated.Value(_this.focusState()) };return _this;

  }_createClass(Label, [{ key: "componentWillReceiveProps", value: function componentWillReceiveProps(

    props) {var _this$state =
      this.state,focus = _this$state.focus,input = _this$state.input;var _this$props =
      this.props,active = _this$props.active,focused = _this$props.focused,errored = _this$props.errored,duration = _this$props.animationDuration;

      if (focused ^ props.focused || active ^ props.active) {
        var toValue = this.inputState(props);

        _reactNative.Animated.
        timing(input, { toValue: toValue, duration: duration }).
        start();
      }

      if (focused ^ props.focused || errored ^ props.errored) {
        var _toValue = this.focusState(props);

        _reactNative.Animated.
        timing(focus, { toValue: _toValue, duration: duration }).
        start();
      }
    } }, { key: "inputState", value: function inputState()

    {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props,focused = _ref.focused,active = _ref.active;
      return active || focused ? 1 : 0;
    } }, { key: "focusState", value: function focusState()

    {var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props,focused = _ref2.focused,errored = _ref2.errored;
      return errored ? -1 : focused ? 1 : 0;
    } }, { key: "render", value: function render()

    {var _this$state2 =
      this.state,focus = _this$state2.focus,input = _this$state2.input;var _this$props2 =
















      this.props,children = _this$props2.children,restricted = _this$props2.restricted,fontSize = _this$props2.fontSize,activeFontSize = _this$props2.activeFontSize,errorColor = _this$props2.errorColor,baseColor = _this$props2.baseColor,tintColor = _this$props2.tintColor,baseSize = _this$props2.baseSize,basePadding = _this$props2.basePadding,style = _this$props2.style,errored = _this$props2.errored,active = _this$props2.active,focused = _this$props2.focused,animationDuration = _this$props2.animationDuration,props = _objectWithoutProperties(_this$props2, ["children", "restricted", "fontSize", "activeFontSize", "errorColor", "baseColor", "tintColor", "baseSize", "basePadding", "style", "errored", "active", "focused", "animationDuration"]);

      var color = restricted ?
      errorColor :
      focus.interpolate({
        inputRange: [-1, 0, 1],
        outputRange: [errorColor, baseColor, tintColor] });


      var top = input.interpolate({
        inputRange: [0, 1],
        outputRange: [
        baseSize + fontSize * 0.25,
        baseSize - basePadding - activeFontSize] });



      var textStyle = {
        fontSize: input.interpolate({
          inputRange: [0, 1],
          outputRange: [fontSize, activeFontSize] }),


        color: color };


      var containerStyle = {
        position: 'absolute',
        top: top };


      return (
        _react.default.createElement(_reactNative.Animated.View, { style: containerStyle, __source: { fileName: _jsxFileName, lineNumber: 128 } },
        _react.default.createElement(_reactNative.Animated.Text, _extends({ style: [style, textStyle] }, props, { __source: { fileName: _jsxFileName, lineNumber: 129 } }),
        children)));



    } }]);return Label;}(_react.PureComponent);exports.default = Label;Label.defaultProps = { numberOfLines: 1, active: false, focused: false, errored: false, restricted: false };Label.propTypes = { active: _propTypes.default.bool, focused: _propTypes.default.bool, errored: _propTypes.default.bool, restricted: _propTypes.default.bool, baseSize: _propTypes.default.number.isRequired, fontSize: _propTypes.default.number.isRequired, activeFontSize: _propTypes.default.number.isRequired, basePadding: _propTypes.default.number.isRequired, tintColor: _propTypes.default.string.isRequired, baseColor: _propTypes.default.string.isRequired, errorColor: _propTypes.default.string.isRequired, animationDuration: _propTypes.default.number.isRequired, style: _reactNative.Animated.Text.propTypes.style, children: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node]) };