{"file":"D:\\CodingProjects\\Github\\typescript-material-ui-collection\\ExampleAndTest\\lib\\Components\\MaterialProgress\\MaterialIndicator\\material-indicator\\index.tsx","mappings":"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","names":[],"sources":["D:\\CodingProjects\\Github\\typescript-material-ui-collection\\ExampleAndTest\\lib\\Components\\MaterialProgress\\MaterialIndicator\\material-indicator\\index.tsx"],"sourcesContent":["import * as React from 'react'\nimport  { PureComponent } from 'react'\n\nimport { View, Animated, Easing } from 'react-native'\n\nimport Indicator,{IndicatorProps} from '../indicator'\nimport styles from './styles'\n\nexport interface MaterialIndicatorProps extends IndicatorProps{\n    color: string,\n    size: number,\n    style?:object\n\n}\n\nexport default class MaterialIndicator extends PureComponent<MaterialIndicatorProps> {\n    static defaultProps = {\n        animationDuration: 2400,\n        color: 'rgb(0, 0, 0)',\n        size: 40\n    };\n\n    constructor (props) {\n        super(props)\n\n        this.renderComponent = this.renderComponent.bind(this)\n    }\n\n    renderComponent ({ index, count, progress }) {\n        count = count;\n        let { size, color, animationDuration } = this.props\n\n        let frames = 60 * animationDuration / 1000\n        let easing = Easing.bezier(0.4, 0.0, 0.7, 1.0)\n\n        let inputRange = Array\n            .from(new Array(frames), (undefined={undefined}, frameIndex) => frameIndex / (frames - 1))\n\n        let outputRange = Array\n            .from(new Array(frames), (undefined, frameIndex) => {\n                undefined=undefined;\n                let progress = 2 * frameIndex / (frames - 1)\n                let rotation = index\n                    ? +(360 - 15)\n                    : -(180 - 15)\n\n                if (progress > 1.0) {\n                    progress = 2.0 - progress\n                }\n\n                let direction = index\n                    ? -1\n                    : +1\n\n                return (direction * (180 - 30) * easing(progress) + rotation) + 'deg'\n            })\n\n        let layerStyle = {\n            width: size,\n            height: size,\n            transform: [{\n                rotate: progress.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [(0 + 30 + 15) + 'deg', (2 * 360 + 30 + 15) + 'deg']\n                })\n            }]\n        }\n\n        let viewportStyle = {\n            width: size,\n            height: size,\n            transform: [{\n                translateY: index ? -size / 2 : 0\n            }, {\n                rotate: progress.interpolate({ inputRange, outputRange })\n            }]\n        }\n\n        let containerStyle = {\n            width: size,\n            height: size / 2,\n            overflow: 'hidden'\n        }\n\n        let offsetStyle = index\n            ? { top: size / 2 }\n            : null\n\n        let lineStyle = {\n            width: size,\n            height: size,\n            borderColor: color,\n            borderWidth: size / 10,\n            borderRadius: size / 2\n        }\n\n        return (\n            <Animated.View style={styles.layer} {...{ key: index }}>\n                <Animated.View style={layerStyle}>\n                    <Animated.View style={[containerStyle, offsetStyle]} collapsable={false}>\n                        <Animated.View style={viewportStyle}>\n                            <Animated.View style={containerStyle} collapsable={false}>\n                                <Animated.View style={lineStyle} />\n                            </Animated.View>\n                        </Animated.View>\n                    </Animated.View>\n                </Animated.View>\n            </Animated.View>\n        )\n    }\n\n    render () {\n        let { style, size: width, size: height, ...props } = this.props\n\n        return (\n            <View style={[styles.container, style]}>\n                <Indicator\n                    style={{ width, height }}\n                    renderComponent={this.renderComponent}\n                    {...props}\n                    count={2}\n                />\n            </View>\n        )\n    }\n}\n"],"version":3}