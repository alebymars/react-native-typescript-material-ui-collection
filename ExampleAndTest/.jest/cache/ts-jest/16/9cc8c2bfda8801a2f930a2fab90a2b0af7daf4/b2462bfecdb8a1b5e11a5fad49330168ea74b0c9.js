"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const react_native_1 = require("react-native");
const react_native_material_ripple_1 = require("react-native-material-ripple");
const MaterialCommunityIcons_1 = require("react-native-vector-icons/MaterialCommunityIcons");
const __1 = require("../..");
exports.default = (props) => React.createElement(react_native_material_ripple_1.default, { rippleColor: props.textColor, onPress: () => props.onPress(), style: Object.assign({ borderRadius: 4, margin: props.margin, height: 36, minWidth: 64, overflow: 'hidden', paddingLeft: 16, paddingRight: 16, flexDirection: 'row', alignItems: 'center', justifyContent: 'center' }, props.style) },
    props.icon ? props.icon :
        (!props.progress && props.iconName) &&
            React.createElement(MaterialCommunityIcons_1.default, { style: { margin: 8 }, name: props.iconName, size: 14, color: props.textColor }),
    !props.progress &&
        React.createElement(react_native_1.Text, { style: { fontFamily: props.textFont, color: props.textColor, fontSize: 14 } }, props.text),
    props.progress &&
        React.createElement(__1.MaterialProgress, { color: props.textColor, small: true }));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXENvZGluZ1Byb2plY3RzXFxHaXRodWJcXHR5cGVzY3JpcHQtbWF0ZXJpYWwtdWktY29sbGVjdGlvblxcRXhhbXBsZUFuZFRlc3RcXGxpYlxcQ29tcG9uZW50c1xcTWF0ZXJpYWxUZXh0QnV0dG9uXFxpbmRleC50c3giLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBK0I7QUFDL0IsK0NBQWtDO0FBQ2xDLCtFQUFrRDtBQUNsRCw2RkFBcUY7QUFDckYsNkJBQXVDO0FBY3ZDLGtCQUFlLENBQUMsS0FBOEIsRUFBRSxFQUFFLENBQ2hELG9CQUFDLHNDQUFNLElBQ0wsV0FBVyxFQUFFLEtBQUssQ0FBQyxTQUFTLEVBQzVCLE9BQU8sRUFBRSxHQUFFLEVBQUUsQ0FBQSxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQzVCLEtBQUssa0JBQUcsWUFBWSxFQUFFLENBQUMsRUFDckIsTUFBTSxFQUFDLEtBQUssQ0FBQyxNQUFNLEVBQ25CLE1BQU0sRUFBRSxFQUFFLEVBQ1YsUUFBUSxFQUFFLEVBQUUsRUFDWixRQUFRLEVBQUMsUUFBUSxFQUNqQixXQUFXLEVBQUMsRUFBRSxFQUNkLFlBQVksRUFBQyxFQUFFLEVBQ2YsYUFBYSxFQUFDLEtBQUssRUFDbkIsVUFBVSxFQUFFLFFBQVEsRUFDcEIsY0FBYyxFQUFFLFFBQVEsSUFDckIsS0FBSyxDQUFDLEtBQUs7SUFFZixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQztZQUNuQyxvQkFBQyxnQ0FBc0IsSUFDckIsS0FBSyxFQUFFLEVBQUMsTUFBTSxFQUFDLENBQUMsRUFBQyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFHLEtBQUssQ0FBQyxTQUFTLEdBQzFFO0lBRUgsQ0FBQyxLQUFLLENBQUMsUUFBUTtRQUNoQixvQkFBQyxtQkFBSSxJQUFDLEtBQUssRUFBRSxFQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUMsSUFBRyxLQUFLLENBQUMsSUFBSSxDQUFRO0lBRW5HLEtBQUssQ0FBQyxRQUFRO1FBQ2Ysb0JBQUMsb0JBQWdCLElBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxTQUFTLEVBQUUsS0FBSyxTQUFFLENBRTFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRDpcXENvZGluZ1Byb2plY3RzXFxHaXRodWJcXHR5cGVzY3JpcHQtbWF0ZXJpYWwtdWktY29sbGVjdGlvblxcRXhhbXBsZUFuZFRlc3RcXGxpYlxcQ29tcG9uZW50c1xcTWF0ZXJpYWxUZXh0QnV0dG9uXFxpbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQge1RleHR9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcbmltcG9ydCBSaXBwbGUgZnJvbSAncmVhY3QtbmF0aXZlLW1hdGVyaWFsLXJpcHBsZSc7XG5pbXBvcnQgTWF0ZXJpYWxDb21tdW5pdHlJY29ucyBmcm9tICdyZWFjdC1uYXRpdmUtdmVjdG9yLWljb25zL01hdGVyaWFsQ29tbXVuaXR5SWNvbnMnXG5pbXBvcnQge01hdGVyaWFsUHJvZ3Jlc3N9IGZyb20gXCIuLi8uLlwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1hdGVyaWFsVGV4dEJ1dHRvblByb3BzIHtcbiAgdGV4dDogc3RyaW5nLFxuICBpY29uPzogUmVhY3QuUmVhY3ROb2RlLFxuICBtYXJnaW4/Om51bWJlcixcbiAgdGV4dENvbG9yPzogc3RyaW5nLFxuICB0ZXh0Rm9udD86IHN0cmluZyxcbiAgaWNvbk5hbWU/OnN0cmluZyxcbiAgb25QcmVzcz8oKTp2b2lkLFxuICBwcm9ncmVzcz86Ym9vbGVhbixcbiAgc3R5bGU/Om9iamVjdFxufVxuXG5leHBvcnQgZGVmYXVsdCAocHJvcHM6IE1hdGVyaWFsVGV4dEJ1dHRvblByb3BzKSA9PlxuICA8UmlwcGxlXG4gICAgcmlwcGxlQ29sb3I9e3Byb3BzLnRleHRDb2xvcn1cbiAgICBvblByZXNzPXsoKT0+cHJvcHMub25QcmVzcygpfVxuICAgIHN0eWxlPXt7Ym9yZGVyUmFkaXVzOiA0LFxuICAgICAgbWFyZ2luOnByb3BzLm1hcmdpbixcbiAgICAgIGhlaWdodDogMzYsXG4gICAgICBtaW5XaWR0aDogNjQsXG4gICAgICBvdmVyZmxvdzonaGlkZGVuJyxcbiAgICAgIHBhZGRpbmdMZWZ0OjE2LFxuICAgICAgcGFkZGluZ1JpZ2h0OjE2LFxuICAgICAgZmxleERpcmVjdGlvbjoncm93JyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgLi4ucHJvcHMuc3R5bGVcbiAgICB9fT5cbiAgICB7cHJvcHMuaWNvbiA/IHByb3BzLmljb24gOlxuICAgICAgKCFwcm9wcy5wcm9ncmVzcyAmJiBwcm9wcy5pY29uTmFtZSkgJiZcbiAgICAgIDxNYXRlcmlhbENvbW11bml0eUljb25zXG4gICAgICAgIHN0eWxlPXt7bWFyZ2luOjh9fSBuYW1lPXtwcm9wcy5pY29uTmFtZX0gc2l6ZT17MTR9IGNvbG9yPSB7cHJvcHMudGV4dENvbG9yfVxuICAgICAgLz5cbiAgICB9XG4gICAgeyFwcm9wcy5wcm9ncmVzcyAmJlxuICAgIDxUZXh0IHN0eWxlPXt7Zm9udEZhbWlseTogcHJvcHMudGV4dEZvbnQsIGNvbG9yOiBwcm9wcy50ZXh0Q29sb3IsIGZvbnRTaXplOiAxNH19Pntwcm9wcy50ZXh0fTwvVGV4dD5cbiAgICB9XG4gICAge3Byb3BzLnByb2dyZXNzICYmXG4gICAgPE1hdGVyaWFsUHJvZ3Jlc3MgY29sb3I9e3Byb3BzLnRleHRDb2xvcn0gc21hbGwvPlxuICAgIH1cbiAgPC9SaXBwbGU+O1xuIl0sInZlcnNpb24iOjN9