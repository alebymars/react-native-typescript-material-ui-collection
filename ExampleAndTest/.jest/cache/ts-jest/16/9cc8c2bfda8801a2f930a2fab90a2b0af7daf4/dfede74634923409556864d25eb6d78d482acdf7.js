"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const react_1 = require("react");
const react_native_1 = require("react-native");
const MaterialCommunityIcons_1 = require("react-native-vector-icons/MaterialCommunityIcons");
const react_native_material_ripple_1 = require("react-native-material-ripple");
const helper_1 = require("./helper");
const DEFAULT_TOOLBAR_HEIGHT = 300;
class MaterialCollapsibleToolbarContainer extends react_1.Component {
    constructor(props) {
        super(props);
        const APPBAR_HEIGHT = react_native_1.Platform.OS === 'ios' ? 44 : 56;
        const ANDROID_STATUS_BAR_HEIGHT = props.translucentStatusBar ? react_native_1.StatusBar.currentHeight : 0;
        this.statusBarHeight = react_native_1.Platform.OS === 'ios' ? helper_1.ifIphoneX(44, 20) : ANDROID_STATUS_BAR_HEIGHT;
        this.navBarHeight = react_native_1.Platform.OS === 'ios' ? APPBAR_HEIGHT + this.statusBarHeight : APPBAR_HEIGHT;
        this.maxScrollableHeight = props.toolBarHeight - this.navBarHeight;
        const inputRange1 = [this.maxScrollableHeight / 2, this.maxScrollableHeight];
        const inputRange2 = [this.maxScrollableHeight - 0.1, this.maxScrollableHeight];
        this.blurRadius = new react_native_1.Animated.Value(0);
        this.scrollOffsetY = new react_native_1.Animated.Value(0);
        this.toolBarOpacity = this.scrollOffsetY.interpolate({
            inputRange: inputRange1,
            outputRange: [1, 0]
        });
        this.toolBarOverlayOpacity = this.scrollOffsetY.interpolate({
            inputRange: inputRange1,
            outputRange: [0, 1]
        });
        this.navBarOpacity = this.scrollOffsetY.interpolate({
            inputRange: inputRange2,
            outputRange: [0, 1]
        });
        this.navBarOverlayOpacity = this.scrollOffsetY.interpolate({
            inputRange: inputRange2,
            outputRange: [1, 0]
        });
        this.titleFontSize = this.scrollOffsetY.interpolate({
            inputRange: inputRange1,
            outputRange: [2, 1]
        });
        this.blurRadius = this.scrollOffsetY.interpolate({
            inputRange: inputRange1,
            outputRange: [1, 2]
        });
    }
    render() {
        const _a = this.props, { collapsedNavBarBackgroundColor, imageSource, onContentScroll, renderContent, toolBarHeight } = _a, props = __rest(_a, ["collapsedNavBarBackgroundColor", "imageSource", "onContentScroll", "renderContent", "toolBarHeight"]);
        if (!imageSource) {
            //  console.error('Either an image source or a custom toolbar component must be provided')
        }
        return (React.createElement(react_native_1.View, { style: styles.container },
            React.createElement(react_native_1.Animated.ScrollView, Object.assign({}, props, { scrollEventThrottle: 1, onScroll: react_native_1.Animated.event([{ nativeEvent: { contentOffset: { y: this.scrollOffsetY } } }], {
                    useNativeDriver: true,
                    listener: onContentScroll
                }) }),
                React.createElement(react_native_1.Animated.View, { style: [
                        styles.toolBarOverlay,
                        {
                            backgroundColor: collapsedNavBarBackgroundColor,
                            height: toolBarHeight,
                            opacity: this.toolBarOverlayOpacity
                        }
                    ] },
                    React.createElement(MaterialCommunityIcons_1.default, { style: { position: 'absolute', left: 16, top: 16 }, name: 'menu', size: 24, color: 'white' }),
                    React.createElement(react_native_1.Animated.Text, { style: {
                            transform: [
                                { scale: this.titleFontSize }
                            ],
                            position: 'absolute',
                            marginLeft: 56,
                            bottom: 16,
                            textAlign: 'center',
                            color: '#FFF'
                        } }, this.props.title)),
                React.createElement(react_native_1.Animated.View, { style: { opacity: this.toolBarOpacity } },
                    React.createElement(react_native_1.View, { style: { height: toolBarHeight } },
                        React.createElement(react_native_1.Animated.Image, { source: { uri: imageSource || '' }, style: { height: toolBarHeight }, blurRadius: this.blurRadius }),
                        React.createElement(react_native_1.Animated.View, { style: { position: 'absolute', top: 50, bottom: 50, left: 0, right: 0, alignItems: 'center', justifyContent: 'center' } }, this.props.renderCollapsedToolbarContent()),
                        React.createElement(react_native_1.Animated.Text, { style: {
                                transform: [
                                    { scale: this.titleFontSize }
                                ],
                                position: 'absolute',
                                marginLeft: 56,
                                bottom: 16,
                                textAlign: 'center',
                                color: '#FFF'
                            } }, this.props.title))),
                renderContent()),
            React.createElement(react_native_1.Animated.View, { style: [
                    styles.navBarContainer,
                    {
                        backgroundColor: collapsedNavBarBackgroundColor,
                        height: this.navBarHeight,
                        opacity: this.navBarOpacity,
                        paddingTop: this.statusBarHeight
                    }
                ] },
                React.createElement(react_native_material_ripple_1.default, { rippleColor: this.props.textColor, onPress: () => this.props.onLeftIconPress(), style: {
                        position: 'absolute', left: 0, top: 0,
                        height: 56,
                        width: 56,
                        zIndex: 100,
                        overflow: 'hidden',
                        alignItems: 'center',
                        justifyContent: 'center'
                    } },
                    React.createElement(MaterialCommunityIcons_1.default, { name: this.props.leftButtonIcon, size: 24, color: this.props.textColor })),
                this.props.rightButtonIcon &&
                    React.createElement(react_native_material_ripple_1.default, { rippleColor: this.props.textColor, onPress: () => this.props.onRightIconPress(), style: {
                            position: 'absolute', right: 0, top: 0,
                            height: 56,
                            width: 56,
                            overflow: 'hidden',
                            alignItems: 'center',
                            justifyContent: 'center'
                        } },
                        React.createElement(MaterialCommunityIcons_1.default, { name: this.props.rightButtonIcon, size: 24, color: this.props.textColor })),
                React.createElement(react_native_1.Animated.Text, { style: {
                        transform: [
                            { scale: 1 }
                        ],
                        position: 'absolute',
                        marginLeft: 56,
                        bottom: 16,
                        textAlign: 'center',
                        color: '#FFF'
                    } }, this.props.title)),
            React.createElement(react_native_material_ripple_1.default, { rippleColor: this.props.textColor, onPress: () => this.props.onLeftIconPress(), style: {
                    position: 'absolute', left: 0, top: 0,
                    height: 56,
                    width: 56,
                    overflow: 'hidden',
                    alignItems: 'center',
                    justifyContent: 'center'
                } },
                React.createElement(MaterialCommunityIcons_1.default, { name: this.props.leftButtonIcon, size: 24, color: this.props.textColor })),
            this.props.rightButtonIcon &&
                React.createElement(react_native_material_ripple_1.default, { rippleColor: this.props.textColor, onPress: () => this.props.onRightIconPress(), style: {
                        position: 'absolute', right: 0, top: 0,
                        height: 56,
                        width: 56,
                        overflow: 'hidden',
                        alignItems: 'center',
                        justifyContent: 'center'
                    } },
                    React.createElement(MaterialCommunityIcons_1.default, { name: this.props.rightButtonIcon, size: 24, color: this.props.textColor }))));
    }
}
MaterialCollapsibleToolbarContainer.defaultProps = {
    collapsedNavBarBackgroundColor: '#FFF',
    imageSource: '',
    toolBarHeight: DEFAULT_TOOLBAR_HEIGHT,
    translucentStatusBar: false,
    renderCollapsedToolbarContent: () => { },
    renderContent: () => { },
    onContentScroll: () => { },
    onLeftIconPress: () => { },
    onRightIconPress: () => { }
};
exports.default = MaterialCollapsibleToolbarContainer;
const styles = react_native_1.StyleSheet.create({
    container: {
        flex: 1
    },
    toolBarOverlay: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0
    },
    navBarContainer: Object.assign({ position: 'absolute', left: 0, right: 0, flexDirection: 'row' }, react_native_1.Platform.select({
        ios: {
            shadowColor: 'black',
            shadowOpacity: 0.1,
            shadowRadius: react_native_1.StyleSheet.hairlineWidth,
            shadowOffset: {
                width: react_native_1.StyleSheet.hairlineWidth,
                height: react_native_1.StyleSheet.hairlineWidth
            },
            borderBottomWidth: react_native_1.StyleSheet.hairlineWidth,
            borderBottomColor: 'rgba(0, 0, 0, .3)'
        },
        android: {
            elevation: 4
        }
    })),
    navBarOverlay: {
        backgroundColor: 'rgba(0, 0, 0, 0)',
        position: 'absolute',
        left: 0,
        right: 0
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,