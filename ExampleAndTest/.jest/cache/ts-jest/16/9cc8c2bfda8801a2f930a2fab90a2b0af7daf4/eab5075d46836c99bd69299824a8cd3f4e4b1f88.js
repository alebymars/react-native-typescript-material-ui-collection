"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const react_native_1 = require("react-native");
const react_native_material_ripple_1 = require("react-native-material-ripple");
const MaterialCommunityIcons_1 = require("react-native-vector-icons/MaterialCommunityIcons");
const Animatable = require("react-native-animatable");
exports.default = (props) => {
    const nav = props.navigation;
    const routes = props.isRtl ? nav.state.routes.slice(0).reverse() : nav.state.routes;
    return (React.createElement(react_native_1.View, { style: Object.assign({}, props.style, { height: 56, width: '100%', flexDirection: 'row' }) }, routes.map((route, i) => (React.createElement(react_native_material_ripple_1.default, { key: i, onPress: () => {
            props.jumpTo(route.key);
        }, style: { flex: 1, height: 56, alignItems: 'center', justifyContent: 'center' } },
        React.createElement(Animatable.View, { useNativeDriver: true, transition: "translateY", style: { transform: [{ translateY: props.noLabel ? 0 : props.animated ? nav.isFocused(route.key) ? 0 : 16 : 0 }] } },
            React.createElement(MaterialCommunityIcons_1.default, { name: props.iconName(route.key), size: 24, style: { marginBottom: 0 }, color: nav.isFocused(route.key) ?
                    props.selectedColor :
                    props.defaultColor })),
        !props.noLabel &&
            React.createElement(Animatable.Text, { useNativeDriver: true, transition: "opacity", style: {
                    opacity: props.animated ? nav.isFocused(route.key) ? 1 : 0 : 1,
                    color: nav.isFocused(route.key) ? props.selectedColor : props.defaultColor,
                    fontFamily: props.fontFamily,
                    fontSize: props.fontSize
                } }, route.key))))));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXENvZGluZ1Byb2plY3RzXFxHaXRodWJcXHR5cGVzY3JpcHQtbWF0ZXJpYWwtdWktY29sbGVjdGlvblxcRXhhbXBsZUFuZFRlc3RcXGxpYlxcQ29tcG9uZW50c1xcTWF0ZXJpYWxCb3R0b21UYWJiYXJcXGluZGV4LnRzeCIsIm1hcHBpbmdzIjoiOztBQUFBLCtCQUErQjtBQUMvQiwrQ0FBa0M7QUFDbEMsK0VBQWtEO0FBQ2xELDZGQUE2RTtBQUM3RSxzREFBc0Q7QUFFdEQsa0JBQWUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUN2QixNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO0lBQzdCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFFcEYsT0FBTyxDQUNMLG9CQUFDLG1CQUFJLElBQUMsS0FBSyxvQkFBTSxLQUFLLENBQUMsS0FBSyxJQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsS0FBSyxPQUMxRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FDeEIsb0JBQUMsc0NBQU0sSUFDTCxHQUFHLEVBQUUsQ0FBQyxFQUNOLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDWixLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQixDQUFDLEVBQ0QsS0FBSyxFQUFFLEVBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBQztRQUU1RSxvQkFBQyxVQUFVLENBQUMsSUFBSSxJQUFDLGVBQWUsUUFBQyxVQUFVLEVBQUUsWUFBWSxFQUN4QyxLQUFLLEVBQUUsRUFBQyxTQUFTLEVBQUUsQ0FBQyxFQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztZQUMzSCxvQkFBQyxnQ0FBYSxJQUNaLElBQUksRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFDL0IsSUFBSSxFQUFFLEVBQUUsRUFDUixLQUFLLEVBQUUsRUFBQyxZQUFZLEVBQUUsQ0FBQyxFQUFDLEVBQ3hCLEtBQUssRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUMvQixLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7b0JBQ3JCLEtBQUssQ0FBQyxZQUFZLEdBRXBCLENBQ2M7UUFDakIsQ0FBQyxLQUFLLENBQUMsT0FBTztZQUNmLG9CQUFDLFVBQVUsQ0FBQyxJQUFJLElBQUMsZUFBZSxRQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFO29CQUM3RCxPQUFPLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM5RCxLQUFLLEVBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZO29CQUMxRSxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7b0JBQzVCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtpQkFDekIsSUFFRSxLQUFLLENBQUMsR0FBRyxDQUNNLENBRVgsQ0FDVixDQUFDLENBQ0csQ0FDUixDQUFBO0FBQ0gsQ0FBQyxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkQ6XFxDb2RpbmdQcm9qZWN0c1xcR2l0aHViXFx0eXBlc2NyaXB0LW1hdGVyaWFsLXVpLWNvbGxlY3Rpb25cXEV4YW1wbGVBbmRUZXN0XFxsaWJcXENvbXBvbmVudHNcXE1hdGVyaWFsQm90dG9tVGFiYmFyXFxpbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtWaWV3fSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgUmlwcGxlIGZyb20gJ3JlYWN0LW5hdGl2ZS1tYXRlcmlhbC1yaXBwbGUnO1xuaW1wb3J0IE1hdGVyaWFsSWNvbnMgZnJvbSAncmVhY3QtbmF0aXZlLXZlY3Rvci1pY29ucy9NYXRlcmlhbENvbW11bml0eUljb25zJztcbmltcG9ydCAqIGFzIEFuaW1hdGFibGUgZnJvbSAncmVhY3QtbmF0aXZlLWFuaW1hdGFibGUnO1xuXG5leHBvcnQgZGVmYXVsdCAocHJvcHMpID0+IHtcbiAgY29uc3QgbmF2ID0gcHJvcHMubmF2aWdhdGlvbjtcbiAgY29uc3Qgcm91dGVzID0gcHJvcHMuaXNSdGwgPyBuYXYuc3RhdGUucm91dGVzLnNsaWNlKDApLnJldmVyc2UoKSA6IG5hdi5zdGF0ZS5yb3V0ZXM7XG5cbiAgcmV0dXJuIChcbiAgICA8VmlldyBzdHlsZT17ey4uLnByb3BzLnN0eWxlLCBoZWlnaHQ6IDU2LCB3aWR0aDogJzEwMCUnLCBmbGV4RGlyZWN0aW9uOiAncm93J319PlxuICAgICAge3JvdXRlcy5tYXAoKHJvdXRlLCBpKSA9PiAoXG4gICAgICAgIDxSaXBwbGVcbiAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgb25QcmVzcz17KCkgPT4ge1xuICAgICAgICAgICAgcHJvcHMuanVtcFRvKHJvdXRlLmtleSk7XG4gICAgICAgICAgfX1cbiAgICAgICAgICBzdHlsZT17e2ZsZXg6IDEsIGhlaWdodDogNTYsIGFsaWduSXRlbXM6ICdjZW50ZXInLCBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcid9fVxuICAgICAgICA+XG4gICAgICAgICAgPEFuaW1hdGFibGUuVmlldyB1c2VOYXRpdmVEcml2ZXIgdHJhbnNpdGlvbj17XCJ0cmFuc2xhdGVZXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e3RyYW5zZm9ybTogW3t0cmFuc2xhdGVZOiBwcm9wcy5ub0xhYmVsPyAwIDpwcm9wcy5hbmltYXRlZCA/IG5hdi5pc0ZvY3VzZWQocm91dGUua2V5KSA/IDAgOiAxNiA6IDB9XX19PlxuICAgICAgICAgICAgPE1hdGVyaWFsSWNvbnNcbiAgICAgICAgICAgICAgbmFtZT17cHJvcHMuaWNvbk5hbWUocm91dGUua2V5KX1cbiAgICAgICAgICAgICAgc2l6ZT17MjR9XG4gICAgICAgICAgICAgIHN0eWxlPXt7bWFyZ2luQm90dG9tOiAwfX1cbiAgICAgICAgICAgICAgY29sb3I9e25hdi5pc0ZvY3VzZWQocm91dGUua2V5KSA/XG4gICAgICAgICAgICAgICAgcHJvcHMuc2VsZWN0ZWRDb2xvciA6XG4gICAgICAgICAgICAgICAgcHJvcHMuZGVmYXVsdENvbG9yXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9BbmltYXRhYmxlLlZpZXc+XG4gICAgICAgICAgeyFwcm9wcy5ub0xhYmVsICYmXG4gICAgICAgICAgPEFuaW1hdGFibGUuVGV4dCB1c2VOYXRpdmVEcml2ZXIgdHJhbnNpdGlvbj17XCJvcGFjaXR5XCJ9IHN0eWxlPXt7XG4gICAgICAgICAgICBvcGFjaXR5OiBwcm9wcy5hbmltYXRlZCA/IG5hdi5pc0ZvY3VzZWQocm91dGUua2V5KSA/IDEgOiAwIDogMSxcbiAgICAgICAgICAgIGNvbG9yOiBuYXYuaXNGb2N1c2VkKHJvdXRlLmtleSkgPyBwcm9wcy5zZWxlY3RlZENvbG9yIDogcHJvcHMuZGVmYXVsdENvbG9yLFxuICAgICAgICAgICAgZm9udEZhbWlseTogcHJvcHMuZm9udEZhbWlseSxcbiAgICAgICAgICAgIGZvbnRTaXplOiBwcm9wcy5mb250U2l6ZVxuICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3JvdXRlLmtleX1cbiAgICAgICAgICA8L0FuaW1hdGFibGUuVGV4dD5cbiAgICAgICAgICB9XG4gICAgICAgIDwvUmlwcGxlPlxuICAgICAgKSl9XG4gICAgPC9WaWV3PlxuICApXG59XG4iXSwidmVyc2lvbiI6M30=